#pragma once

#include <memory>
#include <vector>

#include <Eigen/Geometry>

#include <AxMath/EigenTypes>

namespace thoht {

class InertialBasedScaleEstimation
{
public:
    InertialBasedScaleEstimation();
    ~InertialBasedScaleEstimation();

    enum class ErrorCode
    {
        Success,

        // Setting data
        InconsistentDataSizes,
        NonmonotonicTimes,

        // Initial alignment estimation
        NoData,

        // Scale estimation
        NoInitialAlignment,
        FailedFinalEstimation
    };

    // Pass-in values will replace existed data
    ErrorCode setVisualData(const std::vector<double>& time,
                            const std::vector<Eigen::Vector3d>& positions,
                            const std::vector<Eigen::Quaterniond>& rotations);

    // Pass-in values will replace existed data
    ErrorCode setInertialData(
        const std::vector<double>& accelerometer_time,
        const std::vector<Eigen::Vector3d>& linear_acceleration,
        const std::vector<double>& gyroscope_time,
        const std::vector<Eigen::Vector3d>& angular_velocity);

    // Performs the intial estimate of the alignment of the visual and inertial
    // data. This produces an initial estimate of the scale, bias and gravity
    // vector. However, this estimate is unconstrained, so gravity may be larger
    // than 9.8 m/s^2
    ErrorCode initialAlignmentEstimation();

    // Perform a constrained, non-linear optimiation to refine the scale, bias
    // and gravity estimates generated by 'initialAlignmentEstimation.'  'fMax'
    // is the upper limit for the frequencies used in the optimization objective
    // function. If a larger number is used, higher frequencies will be involved
    // in the optimization, and the optimization itself will be slower and
    // require more ierations.  We use 1.2 Hz as the default.
    // WARNING: Not implement
    ErrorCode estimateScale(double& scale, Eigen::Vector3d& g,
                            Eigen::Vector3d& bias, double fMax = 1.2);

    Eigen::Matrix3d imuToCameraRotation() const;
    double imuToCameraTimeOffset() const;

private:
    class Impl;
    const std::unique_ptr<Impl> d;

    friend class Impl;
};

} // namespace thoht
